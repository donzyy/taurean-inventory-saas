openapi: 3.0.0
info:
  title: TAUREAN API Documentation
  version: 1.0.0
  description: API documentation for TAUREAN Inventory Management System
servers:
  - url: http://localhost:3000

tags:
  - name: Users
    description: User management

paths:
  /api/v1/users:
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "409":
          description: Email or username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
    get:
      summary: Get all users
      tags: [Users]
      responses:
        "200":
          description: Users fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUserList"

  /api/v1/users/{id}:
    get:
      summary: Get a user by ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
    put:
      summary: Update a user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInput"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

    delete:
      summary: Soft delete a user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/users/identifier/{identifier}:
    get:
      summary: Get user by email or username
      tags: [Users]
      parameters:
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        username:
          type: string
        email:
          type: string

    UserInput:
      type: object
      required: [name, username, email, password]
      properties:
        name:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string

    UserUpdateInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string

    PaginationData:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
        perPage:
          type: integer
        totalPages:
          type: integer

    APIResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        errors:
          type: object
          nullable: true
        statusCode:
          type: integer
        pagination:
          $ref: "#/components/schemas/PaginationData"
        data:
          nullable: true

    APIResponseUser:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/User"

    APIResponseUserList:
      allOf:
        - $ref: "#/components/schemas/APIResponse"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/User"
