openapi: 3.0.0
info:
  title: TAUREAN API Documentation
  version: 1.0.0
  description: API documentation for TAUREAN Inventory Management System

servers:
  - url: http://localhost:3000

tags:
  - name: Authentication
    description: Authentication and authorization (Partially Protected)
  - name: Users
    description: User management (Protected)
  - name: Facilities
    description: Facility management (Protected)
  - name: Inventory
    description: Inventory management (Protected)
  - name: Transaction
    description: Transaction management (Partially Protected)

paths:
  /api/v1/auth/login:
    post:
      summary: User login
      tags: [Authentication]
      security: [] # Public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseAuth"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/auth/register:
    post:
      summary: User registration
      tags: [Authentication]
      security: [] # Public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseAuth"
        "409":
          description: Email or username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/auth/refresh:
    post:
      summary: Refresh access token
      tags: [Authentication]
      security: [] # Public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenInput"
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseAuth"
        "401":
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/auth/forgot-password:
    post:
      summary: Forgot password
      tags: [Authentication]
      security: [] # Public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "404":
          description: Email not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/auth/reset-password:
    post:
      summary: Reset password
      tags: [Authentication]
      security: [] # Public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, password]
              properties:
                token:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/auth/verify-email:
    post:
      summary: Verify email
      tags: [Authentication]
      security: [] # Public
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
      responses:
        "200":
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/auth/profile:
    get:
      summary: Get user profile
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
    put:
      summary: Update user profile
      tags: [Authentication]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInput"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/auth/logout:
    post:
      summary: Logout user
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/auth/change-password:
    post:
      summary: Change password
      tags: [Authentication]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [oldPassword, newPassword]
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/users:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Users fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser List"
    post:
      summary: Create new user (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "409":
          description: Conflict - User exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/users/statistics:
    get:
      summary: Get user statistics (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User statistics fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                  activeUsers:
                    type: integer
                  inactiveUsers:
                    type: integer

  /api/v1/users/search:
    get:
      summary: Search users (admin or staff)
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Users found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser List"

  /api/v1/users/identifier/{identifier}:
    get:
      summary: Get user by email or username (admin or staff)
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/users/{id}:
    get:
      summary: Get a user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
    put:
      summary: Update a user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInput"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
    delete:
      summary: Soft delete a user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/users/{id}/role:
    put:
      summary: Update user role (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [role]
              properties:
                role:
                  type: string
      responses:
        "200":
          description: User role updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/users/loyalty/update:
    post:
      summary: Update user loyalty (admin or staff)
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId, loyaltyPoints]
              properties:
                userId:
                  type: string
                loyaltyPoints:
                  type: integer
      responses:
        "200":
          description: User loyalty updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponseUser"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/facilities:
    get:
      summary: Get all facilities
      tags: [Facilities]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Facilities fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
    post:
      summary: Create a new facility (admin only)
      tags: [Facilities]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, description, location]
              properties:
                name:
                  type: string
                description:
                  type: string
                location:
                  type: string
      responses:
        "201":
          description: Facility created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "409":
          description: Conflict - Facility already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/facilities/{id}:
    get:
      summary: Get a facility by ID
      tags: [Facilities]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Facility found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "404":
          description: Facility not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
    put:
      summary: Update a facility by ID (admin or staff)
      tags: [Facilities]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                location:
                  type: string
      responses:
        "200":
          description: Facility updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "404":
          description: Facility not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
    delete:
      summary: Soft delete a facility (admin only)
      tags: [Facilities]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Facility deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "404":
          description: Facility not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/facilities/{id}/availability:
    post:
      summary: Add availability period to a facility (admin or staff)
      tags: [Facilities]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [startTime, endTime]
              properties:
                startTime:
                  type: string
                  format: date-time
                endTime:
                  type: string
                  format: date-time
      responses:
        "200":
          description: Availability period added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "404":
          description: Facility not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

    delete:
      summary: Remove availability period from a facility (admin or staff)
      tags: [Facilities]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [day]
              properties:
                day:
                  type: string
                  enum:
                    [
                      monday,
                      tuesday,
                      wednesday,
                      thursday,
                      friday,
                      saturday,
                      sunday,
                    ]
      responses:
        "200":
          description: Availability period marked unavailable successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "404":
          description: Facility not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/inventory-items:
    get:
      summary: Get all inventory items
      tags: [Inventory]
      security:
        - bearerAuth: []
      parameters:
        - name: showDeleted
          in: query
          required: false
          description: Include deleted items in the response
          schema:
            type: boolean
      responses:
        "200":
          description: A list of inventory items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryItem"

    post:
      summary: Create a new inventory item
      tags: [Inventory]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryItemInput"
      responses:
        "201":
          description: Inventory item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
        "409":
          description: Conflict - Inventory item already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/inventory-items/{id}:
    get:
      summary: Get an inventory item by ID
      tags: [Inventory]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the inventory item
          schema:
            type: string
        - name: showDeleted
          in: query
          required: false
          description: Include deleted item in the response
          schema:
            type: boolean
      responses:
        "200":
          description: An inventory item
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

    put:
      summary: Update an inventory item by ID
      tags: [Inventory]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the inventory item
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryItemInput"
      responses:
        "200":
          description: Inventory item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

    delete:
      summary: Soft delete an inventory item by ID
      tags: [Inventory]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the inventory item
          schema:
            type: string
      responses:
        "200":
          description: Inventory item deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

    post:
      summary: Restore a soft deleted inventory item by ID
      tags: [Inventory]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the inventory item
          schema:
            type: string
      responses:
        "200":
          description: Inventory item restored successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
        "404":
          description: Inventory item not found or not deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/inventory-items/{id}/maintenance:
    post:
      summary: Add maintenance schedule to an inventory item
      tags: [Inventory]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the inventory item
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaintenanceScheduleInput"
      responses:
        "201":
          description: Maintenance schedule added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceSchedule"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/inventory-items/low-stock:
    get:
      summary: Get low stock inventory items
      tags: [Inventory]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of low stock inventory items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryItem"

  /api/v1/transaction/webhook:
    post:
      summary: Handle Paystack webhook
      tags: [Transaction]
      description: Webhook endpoint for Paystack payment notifications (no authentication required)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Paystack webhook payload
      responses:
        "200":
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "400":
          description: Invalid webhook payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/transaction/initialize:
    post:
      summary: Initialize payment and create transaction
      tags: [Transaction]
      security:
        - bearerAuth: []
      description: Initialize a payment transaction for authenticated users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentInitializeInput"
      responses:
        "200":
          description: Payment initialized successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      authorization_url:
                        type: string
                      access_code:
                        type: string
                      reference:
                        type: string
        "400":
          description: Invalid payment data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/transaction/verify/{reference}:
    get:
      summary: Verify payment by reference
      tags: [Transaction]
      security:
        - bearerAuth: []
      description: Verify a payment transaction using Paystack reference
      parameters:
        - name: reference
          in: path
          required: true
          description: Paystack payment reference
          schema:
            type: string
      responses:
        "200":
          description: Payment verification result
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    description: Paystack verification response
        "400":
          description: Invalid reference or verification failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/transaction/details/{reference}:
    get:
      summary: Get payment details by reference
      tags: [Transaction]
      security:
        - bearerAuth: []
      description: Get detailed payment information by reference (admin and staff only)
      parameters:
        - name: reference
          in: path
          required: true
          description: Paystack payment reference
          schema:
            type: string
      responses:
        "200":
          description: Payment details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "404":
          description: Payment not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

  /api/v1/transaction/create-transaction:
    post:
      summary: Create transaction from existing payment
      tags: [Transaction]
      security:
        - bearerAuth: []
      description: Manual fallback to create transaction from existing payment (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionInput"
      responses:
        "201":
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Invalid transaction data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "403":
          description: Forbidden - admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        username:
          type: string
        email:
          type: string

    UserInput:
      type: object
      required: [name, username, email, password]
      properties:
        name:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string

    UserUpdateInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string

    LoginInput:
      type: object
      required: [identifier, password]
      properties:
        identifier:
          type: string
          description: Email or username
        password:
          type: string

    RefreshTokenInput:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string

    APIResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    APIResponseAuth:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/User"
            token:
              type: string

    APIResponseUser:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: "#/components/schemas/User"

    APIResponseUser List:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"

    InventoryItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        sku:
          type: string
        quantity:
          type: integer
        status:
          type: string
          enum: ["in_stock", "rented", "unavailable", "maintenance", "retired"]
        associatedFacility:
          type: string
        category:
          type: string
        purchaseInfo:
          type: object
          properties:
            purchaseDate:
              type: string
              format: date
            purchasePrice:
              type: number
            supplier:
              type: string
            warrantyExpiry:
              type: string
              format: date
        history:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
              change:
                type: number
              reason:
                type: string
              user:
                type: string
              notes:
                type: string
        maintenanceSchedule:
          type: array
          items:
            type: object
            properties:
              scheduledDate:
                type: string
                format: date
              type:
                type: string
                enum: ["cleaning", "repair", "inspection", "calibration"]
              completed:
                type: boolean
              completedDate:
                type: string
                format: date
              cost:
                type: number
              notes:
                type: string
              performedBy:
                type: string
        currentBookings:
          type: array
          items:
            type: string
        specifications:
          type: object
          additionalProperties:
            type: string
        alerts:
          type: object
          properties:
            lowStock:
              type: boolean
            maintenanceDue:
              type: boolean
            warrantyExpiring:
              type: boolean
        isDeleted:
          type: boolean

    InventoryItemInput:
      type: object
      required:
        - name
        - quantity
        - category
      properties:
        name:
          type: string
        description:
          type: string
        sku:
          type: string
        quantity:
          type: integer
        status:
          type: string
          enum: ["in_stock", "rented", "unavailable", "maintenance", "retired"]
        associatedFacility:
          type: string
        category:
          type: string
        purchaseInfo:
          type: object
          properties:
            purchaseDate:
              type: string
              format: date
            purchasePrice:
              type: number
            supplier:
              type: string
            warrantyExpiry:
              type: string
              format: date

    MaintenanceScheduleInput:
      type: object
      required:
        - scheduledDate
        - type
      properties:
        scheduledDate:
          type: string
          format: date
        type:
          type: string
          enum: ["cleaning", "repair", "inspection", "calibration"]
        completed:
          type: boolean
        completedDate:
          type: string
          format: date
        cost:
          type: number
        notes:
          type: string
        performedBy:
          type: string

    MaintenanceSchedule:
      type: object
      properties:
        scheduledDate:
          type: string
          format: date
        type:
          type: string
          enum: ["cleaning", "repair", "inspection", "calibration"]
        completed:
          type: boolean
        completedDate:
          type: string
          format: date
        cost:
          type: number
        notes:
          type: string
        performedBy:
          type: string

    Transaction:
      type: object
      properties:
        _id:
          type: string
          description: Transaction ID
        booking:
          type: string
          description: Associated booking ID
        user:
          type: string
          description: User ID who made the transaction
        account:
          type: string
          description: Account ID
        type:
          type: string
          enum: [income, expense]
          description: Transaction type
        category:
          type: string
          description: Transaction category
        amount:
          type: number
          description: Transaction amount
        method:
          type: string
          enum: [cash, mobile_money, bank, cheque, card]
          description: Payment method
        paymentDetails:
          type: object
          properties:
            paystackReference:
              type: string
              description: Paystack payment reference
            chequeNumber:
              type: string
              description: Cheque number if payment method is cheque
            bankDetails:
              type: object
              properties:
                bankName:
                  type: string
                accountNumber:
                  type: string
                sortCode:
                  type: string
            mobileMoneyDetails:
              type: object
              properties:
                provider:
                  type: string
                  enum: [mtn, telecel, airteltigo, other]
                phoneNumber:
                  type: string
                transactionId:
                  type: string
        ref:
          type: string
          description: Transaction reference
        receiptUrl:
          type: string
          description: URL to receipt document
        approvedBy:
          type: string
          description: ID of user who approved the transaction
        reconciled:
          type: boolean
          description: Whether transaction is reconciled
        reconciledAt:
          type: string
          format: date-time
          description: Date when transaction was reconciled
        facility:
          type: string
          description: Facility ID
        description:
          type: string
          description: Transaction description
        attachments:
          type: array
          items:
            type: string
          description: Array of attachment URLs
        tags:
          type: array
          items:
            type: string
          description: Transaction tags
        isDeleted:
          type: boolean
          description: Soft delete flag
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TransactionInput:
      type: object
      required: [user, type, category, amount, method]
      properties:
        booking:
          type: string
          description: Associated booking ID
        user:
          type: string
          description: User ID who made the transaction
        account:
          type: string
          description: Account ID
        type:
          type: string
          enum: [income, expense]
          description: Transaction type
        category:
          type: string
          description: Transaction category
        amount:
          type: number
          description: Transaction amount
        method:
          type: string
          enum: [cash, mobile_money, bank, cheque, card]
          description: Payment method
        paymentDetails:
          type: object
          properties:
            paystackReference:
              type: string
            chequeNumber:
              type: string
            bankDetails:
              type: object
              properties:
                bankName:
                  type: string
                accountNumber:
                  type: string
                sortCode:
                  type: string
            mobileMoneyDetails:
              type: object
              properties:
                provider:
                  type: string
                  enum: [mtn, telecel, airteltigo, other]
                phoneNumber:
                  type: string
                transactionId:
                  type: string
        ref:
          type: string
        receiptUrl:
          type: string
        facility:
          type: string
        description:
          type: string
        attachments:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string

    PaymentInitializeInput:
      type: object
      required: [email, amount]
      properties:
        email:
          type: string
          format: email
          description: Customer email address
        amount:
          type: number
          description: Payment amount in kobo (for NGN) or pesewas (for GHS)
        currency:
          type: string
          default: "GHS"
          description: Payment currency
        reference:
          type: string
          description: Custom payment reference
        callback_url:
          type: string
          description: URL to redirect after payment
        metadata:
          type: object
          description: Additional payment metadata

    APIResponseUser Statistics:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            totalUsers:
              type: integer
            activeUsers:
              type: integer
            inactiveUsers:
              type: integer

    APIResponseFacility:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            facility:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
                description:
                  type: string
                location:
                  type: string

    APIResponseFacilityList:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: array
          items:
            $ref: "#/components/schemas/APIResponseFacility"

    APIResponseFacilityStatistics:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            totalFacilities:
              type: integer
            availableFacilities:
              type: integer
            bookedFacilities:
              type: integer

    APIResponseAvailability:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            availability:
              type: array
              items:
                type: object
                properties:
                  day:
                    type: string
                  startTime:
                    type: string
                    format: date-time
                  endTime:
                    type: string
                    format: date-time
